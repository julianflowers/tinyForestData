---
title: "Analyse species biodiversity"
subtitle: "Chapter X: Tiny Forest buffer areas"
format: 
   html:
     toc: true
     toc-location: right
editor: visual
execute: 
  echo: false
  warning: false
  message: false
  cache: false
  freeze: true
bibliography: references.bib
---

## 

```{r setup, include=FALSE, cache=TRUE}

#| echo: true
needs(stringi, iNEXT, tidyverse, vegan, here, fs, glue, gt, GGally, sf, data.table, googledrive, janitor, tidyr, corrplot, gdm, car, corrr, psych, broom.mixed, gtsummary, mgcViz)


## download files from google drive
files <- drive_find(q = c("starred = true"))

downlaods <- map(2:nrow(files), \(x) files$id[x] |> drive_download(overwrite = TRUE))

## set working directory

rds_files <- dir_ls(here::here(), regexp = "rds")
gpkg_files <- dir_ls(here::here(), regexp = "gpkg")

## load rds files
rds_data <- map(rds_files, read_rds)
file_names <- map(rds_files, basename)

## read gpkg files (as DT files  - large - convert to SF later)

gpkg_data <- map(gpkg_files, read_sf)
gpkg_names <- map(gpkg_files, basename)

```


## Create matrices

This section creates site-species and species-matrices for birds, mammals, insects and flowering plants

```{r explore spatial data}
setDTthreads(6)

gpkg_data_dt <- as.data.table(gpkg_data[[1]])

## species matrices
gpkg_data_dt_2015_1000 <- gpkg_data_dt[year >= 2015, .N, by = .(tf_id, year, classs, family, species)]

## site species
global_site_sp_matrix <- dcast(gpkg_data_dt_2015_1000, tf_id + year + classs + family ~ species, value.var = "N") 
global_site_sp_matrix[classs %in% c("Aves"),] -> tf_birds_s
global_site_sp_matrix[classs %in% c("Insecta"),] -> tf_insects_s
global_site_sp_matrix[classs %in% c("Mammalia"),] -> tf_mammals_s
global_site_sp_matrix[classs %in% c("Magnoliopsida"),] -> tf_plants_s
  
## species site

global_sp_site_matrix <- dcast(gpkg_data_dt_2015_1000, species + year + classs + family ~ tf_id, value.var = "N") 
global_sp_site_matrix[!is.na(species), ][classs %in% c("Aves"),] -> tf_birds
global_sp_site_matrix[!is.na(species), ][classs %in% c("Insecta"),] -> tf_insects
global_sp_site_matrix[!is.na(species), ][classs %in% c("Mammalia"),] -> tf_mammals
global_sp_site_matrix[!is.na(species), ][classs %in% c("Magnoliopsida"),] -> tf_plants
  

```

## Calculate richness and diversity

### NBN birds

#### iNEXT

Fill in NAs

Need to remove sites with 0 observations

```{r, eval=FALSE}

options(scipen = 999)

## fill in na and convert to presence-absence
tf_birds <- tf_birds |> mutate_all(\(x)  ifelse(is.na(x), 0, 1))

## which sites have zero counts - remove character fields
tf_birds_site <- tf_birds[, -c(1:4)]

## which have sum > 0
non_zero_counts <- which(tf_birds_site |>
  map_dbl(sum) > 0)

tf_birds_site <- tf_birds_site |> select(non_zero_counts)

# birds_iNEXT <- iNEXT::iNEXT(as.matrix(tf_birds_site), q = c(0, 1, 2), datatype = "abundance")
# 
# birds_iNEXT$iNextEst$coverage_based |>
#     group_by(Assemblage, Order.q, Method) |>
#     filter(Method %in% c("Extrapolation", "Observed")) |>
#     slice_max(qD) |>
#     arrange(as.numeric(Assemblage), Method, Order.q) |>
#     filter(Order.q == 0) |>
#     select(Assemblage, m, Method) |>
#     pivot_wider(names_from = Method, values_from = m)

```


#### vegan

```{r species-richness, cache=FALSE}

## specaccum and specpool uses site-species matrix

tf_bird_w <- tf_birds_s |>
  filter(classs == "Aves") |> 
  janitor::remove_empty() |>
  select(-c(year, classs:family)) |>
  mutate(tf_id = as.character(tf_id)) |>
  mutate_if(is.numeric, \(x)  ifelse(is.na(x), 0, 1)) |>
  nest_by(tf_id)

pooled_richness <- tf_bird_w |>
  mutate(rich = list(vegan::specpool(data))) |>
  unnest(rich)

pooled_simpson <- tf_bird_w |>
  mutate(div = list(vegan::diversity(data, "simpson"))) |>
  unnest(div)


```


### Mammals

```{r mammals}

tf_mammals_w <- tf_mammals_s |>
  filter(classs == "Mammalia") |> 
  janitor::remove_empty() |>
  select(-c(year, classs:family)) |>
  mutate(tf_id = as.character(tf_id)) |>
  mutate_if(is.numeric, \(x) ifelse(is.na(x), 0, 1)) |>
  nest_by(tf_id)

pooled_richness_m <- tf_mammals_w |>
  mutate(rich = list(vegan::specpool(data))) |>
  unnest(rich)

pooled_simpson_m <- tf_mammals_w |>
  mutate(div = list(vegan::diversity(data, "simpson"))) |>
  unnest(div)


```



### Insects

```{r insects}

tf_insects_w <- tf_insects_s |>
  filter(classs == "Insecta") |> 
  janitor::remove_empty() |>
  select(-c(year, classs:family)) |>
  mutate(tf_id = as.character(tf_id)) |>
  mutate_if(is.numeric, \(x) ifelse(is.na(x), 0, 1)) |>
  nest_by(tf_id)

pooled_richness_i <- tf_insects_w |>
  mutate(rich = list(vegan::specpool(data))) |>
  unnest(rich)

pooled_simpson_m <- tf_insects_w |>
  mutate(div = list(vegan::diversity(data, "simpson"))) |>
  unnest(div)


```


### Butterflies

```{r butterflies}

tf_but_w <- tf_insects_s |>
  filter(str_detect(family, "Pier|Hesper|Nympal|Papilionidae|Riodinidae|Lycaenidae")) |> 
  janitor::remove_empty() |>
  select(-c(year, classs:family)) |>
  mutate(tf_id = as.character(tf_id)) |>
  mutate_if(is.numeric, \(x)  ifelse(is.na(x), 0, 1)) |>
  nest_by(tf_id)

pooled_richness_b <- tf_but_w |>
  mutate(rich = list(vegan::specpool(data))) |>
  unnest(rich)

pooled_simpson_b <- tf_but_w |>
  mutate(div = list(vegan::diversity(data, "simpson"))) |>
  unnest(div)


```


### Plants

```{r plants}

tf_plant_w <- tf_plants_s |>
  filter(str_detect(classs, "Magnoliop")) |> 
  janitor::remove_empty() |>
  select(-c(year, classs:family)) |>
  mutate(tf_id = as.character(tf_id)) |>
  mutate_if(is.numeric, \(x)  ifelse(is.na(x), 0, 1)) |>
  nest_by(tf_id)

pooled_richness_p <- tf_plant_w |>
  mutate(rich = list(vegan::specpool(data))) |>
  unnest(rich)

pooled_simpson_p <- tf_plant_w |>
  mutate(div = list(vegan::diversity(data, "simpson"))) |>
  unnest(div)


```


## Total observed species across TFs by taxa

```{r tot-spcies}

n_bird <- tf_bird_w |> mutate(no = list(ncol(data))) %>% unnest(no) |> ungroup() |> slice(1) |> select(no) |> mutate(taxa = "birds")

n_but <- tf_but_w |> mutate(no = list(ncol(data))) %>% unnest(no) |> ungroup() |> slice(1) |> select(no) |> mutate(taxa = "butterflies")

n_insects <- tf_insects_w |> mutate(no = list(ncol(data))) %>% unnest(no) |> ungroup() |> slice(1) |> select(no) |> mutate(taxa = "insects")

n_mammals <- tf_mammals_w |> mutate(no = list(ncol(data))) %>% unnest(no) |> ungroup() |> slice(1) |> select(no) |> mutate(taxa = "mammals")
                                                                      
n_plants <- tf_plant_w |> mutate(no = list(ncol(data))) %>% unnest(no) |> ungroup() |> slice(1) |> select(no) |> mutate(taxa = "plants")

n_taxa <- bind_rows(n_bird, n_but, n_insects, n_mammals, n_plants)


```



## Combine TF data

```{r tf-combined}

pooled_richness <- pooled_richness |> select(-data) |> mutate(taxa = "birds")
pooled_richness_b <- pooled_richness_b |> select(-data) |> mutate(taxa = "butterflies")
pooled_richness_i <- pooled_richness_i |> select(-data) |> mutate(taxa = "insects")
pooled_richness_m <- pooled_richness_m |> select(-data) |> mutate(taxa = "mammals")
pooled_richness_p <- pooled_richness_p |> select(-data) |> mutate(taxa = "plants")

combined_richness <- bind_rows(pooled_richness, pooled_richness_b, pooled_richness_i, pooled_richness_p, pooled_richness_m) |> 
    left_join(n_taxa)

```

## Correlation

```{r explore richness estimates}


combined_richness_wide <- combined_richness |>
  select(tf_id, taxa, Species, chao, jack1, jack2, boot) |>
  ungroup() |>
  pivot_longer(names_to = "rich_est", values_to = "vals", cols = 3:last_col()) |>
  pivot_wider(names_from = c("taxa", "rich_est"), values_from = c("vals")) 

combined_richness_wide |>
  ungroup() |>
  select(2:last_col()) |>
  cor(use = "na.or.complete") |>
  corrplot::corrplot(order = "FPC", method = "ellipse", tl.cex = .6, tl.col = "black")

boot_est <- combined_richness_wide |>
  select(contains("boot")) 

gam_mod <- mgcv::gam(butterflies_boot ~ s(mammals_boot) + s(insects_boot) + s(plants_boot) + s(birds_boot), data = boot_est) 

mgcv::gam.check(gam_mod) ## low p values suggest residuals are not normally distributed - inspect plots

pl <- getViz(gam_mod)

print(plot(pl, allTerms = T), pages = 1)

gam_mod |> 
  plot(seWithMean = TRUE, shift = coef(gam_mod)[1], residuals = TRUE, rug = TRUE, shade = TRUE)

```


## Environmental variables

Extract environmental variables:

* Landscape morphology
* Connectivity
* Climate
  + Seasonal rainfall
  + Seasonal temperature
* Land cover and landuse
* Vegetation indices

```{r}

climate_landscape <- read_csv("climate_landscape.csv")

variables <- climate_landscape |>
    mutate(tf_id = as.character(tf_id)) 

vegetation <- read_csv("/Users/julianflowers/Library/CloudStorage/GoogleDrive-julian.flowers12@gmail.com/My Drive/dissertation/data/summary_veg_tf.csv")


env <- left_join(climate_landscape, vegetation) |>
  mutate(tf_id = as.character(tf_id))

gtsummary::tbl_summary(env[, -1], by = land_cover, 
                       digits = all_continuous() ~ 2)  |>
  add_p() |>
   modify_header(label ~ "**Variable**") %>%
  modify_spanning_header(c("stat_1", "stat_2", "stat_3", "stat_4", "stat_5") ~ "**Land cover**")

```

## TF variables

```{r}

tf_var <- read_csv("/Users/julianflowers/Library/CloudStorage/GoogleDrive-julian.flowers12@gmail.com/My Drive/dissertation/data/tf_characteristics.csv")

tf_var |>
  select(site = tf_id, 
         `% green infrastructure` = prop_gi, 
         `% built area` = built, 
         `Dominant land cover` = description, 
         `Land use` = oslandusetiera, 
         `Rural-urban` = capturespecification, 
         `Tiny Forest age` = tf_age, 
         Elevation = elevation, 
         Trees = trees) |>
  mutate(Trees = str_split(Trees, "\\|")) |>
  unnest("Trees") |>
  group_by(site) |>
  mutate(n_trees = n(), 
         forcats::fct_na_value_to_level(`Dominant land cover`)) |>
  select(-c(site, Trees)) |>
  distinct(.keep_all = FALSE) |>
  ungroup() |>
  gtsummary::tbl_summary(by = `Dominant land cover`, )

```




```{r}


env_1 <- env |>
   mutate(tf_id = as.numeric(tf_id)) |>
  inner_join(tf_var, by = "tf_id")

## summarise climate variables

env1 |>
  
  

```




```{r}
## scale 
## 

env_scale <- env |> mutate_if(is.numeric, scale)

temps <- env_scale |>
  select(contains("temper")) |>
  mutate_all(scale) |>
  princomp()

summary(temps)

temp_comp <- temps[["scores"]][, 1:2]

rain <- env_scale |>
  select(contains("rain")) |>
  mutate_all(scale) |>
  princomp()

summary(rain)

rain_comp <- rain[["scores"]][, 1:3]

conn <- env_scale |>
  select(NC:IIC) |>
  mutate_all(scale) |>
  princomp()

summary(conn)

conn_comp <- conn[["scores"]][, 1:2]

ls <- env_scale |>
  select(contains("lsm")) |>
  mutate_all(scale) |>
  princomp()

summary(ls)

ls_comp <- ls[["scores"]][, 1:3]

veg <- env_scale |>
  select(contains("median")) |>
  mutate_all(scale) |>
  princomp()

summary(veg)

veg_comp <- veg[['scores']][, 1]

new_preds <- bind_cols(temp_comp, rain_comp, conn_comp, ls_comp, veg_comp) |>
  rename(temp1 = 1, temp2 = 2, rain1 = 3, rain2 = 4, rain3 = 5,  conn1 = 6, conn2 = 7,  ls1 = 8, ls2 = 9, ls3 = 10,  veg1 = 11)

new_preds <- bind_cols(new_preds, env[, 1:4])


```

## Richness modelling

### Environmental variables

### Birds

```{r bird-richness}

needs(tidymodels, ranger, doParallel, xgboost, vip)

cores <- parallel::detectCores(logical = FALSE)
registerDoParallel(cores = all_cores)

birds_r_m <- combined_richness_wide |>
  left_join(new_preds) |>
  select(tf_id, contains("birds"), temp1:Y) |>
  filter(!is.na(birds_Species), !is.na(temp1))

## tidy model workflow
## 

#####
lm_spec <- linear_reg() %>%
  set_engine(engine = "lm")

lm_fit <- fit(lm_spec, birds_jack1 ~ ., birds_r_m |> select(birds_jack1, temp1:last_col()))
lm_fit

rf_spec <- 
  rand_forest(trees = 1000) %>% 
  set_engine("ranger", num.threads = cores, importance = "impurity") %>% 
  set_mode("regression")

rf_fit <- rf_spec %>% fit( birds_jack1 ~ ., birds_r_m |> select(birds_jack1, temp1:last_col()))

rf_fit$fit$variable.importance |> enframe() |>
  arrange(-value) |>
  ggplot() +
  geom_col(aes(reorder(name, -value), value))

gam_fit <- gen_additive_mod() %>% 
  set_engine("mgcv") %>% 
  set_mode("regression") %>% 
  fit(birds_jack1 ~  s(temp1) + s(temp2) +s(rain1) +s(rain2) + s(rain3) + s(conn1) + s(conn2) + s(ls1) + s(ls2) + s(ls3) + s(veg1) + s(elevation) + s(Y), 
        data = birds_r_m |> select(birds_jack1, temp1:last_col()))

gam_fit$fit |> gtsummary::tbl_regression()

results_train <- lm_fit %>%
  predict(new_data = birds_r_m |> select(birds_jack1, temp1:last_col())) %>%
  mutate(
    truth = birds_r_m$birds_jack1,
    model = "lm"
  ) %>%
  bind_rows(rf_fit %>%
    predict(new_data = birds_r_m |> select(birds_jack1, temp1:last_col())) %>%
    mutate(
      truth = birds_r_m$birds_jack1,
      model = "rf"
    ) ) |> 
      bind_rows(gam_fit %>%
    predict(new_data = birds_r_m |> select(birds_jack1, temp1:last_col())) %>%
    mutate(
      truth = birds_r_m$birds_jack1,
      model = "gam"
      )
    )

results_train %>%
  group_by(model) %>%
  rmse(truth = truth, estimate = .pred)

```


### Butterflies

```{r butterfly models}

butterflies_r_m <- combined_richness_wide |>
  left_join(new_preds) |>
  select(tf_id, contains("butter"), temp1:Y) |>
  filter(!is.na(butterflies_Species), !is.na(temp1))

## tidy model workflow
## 

#####
lm_spec <- linear_reg() %>%
  set_engine(engine = "lm")

lm_fit_b <- fit(lm_spec, butterflies_jack1 ~ ., butterflies_r_m |> select(butterflies_jack1, temp1:last_col()))
lm_fit_b

rf_spec <- 
  rand_forest(trees = 1000) %>% 
  set_engine("ranger", num.threads = cores, importance = "impurity") %>% 
  set_mode("regression")

rf_fit_b <- rf_spec %>% fit( butterflies_jack1 ~ ., butterflies_r_m |> select(butterflies_jack1, temp1:last_col()))

rf_fit_b$fit$variable.importance |> enframe() |>
  arrange(-value) |>
  ggplot() +
  geom_col(aes(reorder(name, -value), value))

gam_fit_b <- gen_additive_mod() %>%
  set_engine("mgcv") %>%
  set_mode("regression") %>%
  fit(butterflies_jack1 ~  s(temp1) + s(temp2) +s(rain1) +s(rain2) + s(rain3) + s(conn1) + s(conn2) + s(ls1) + s(ls2) + s(ls3) + s(veg1) + s(elevation) + s(Y),
        data = butterflies_r_m |> select(butterflies_jack1, temp1:last_col()))

gam_fit_b$fit |> tbl_regression()

results_train_b <- lm_fit_b %>%
  predict(new_data = butterflies_r_m |> select(butterflies_jack1, temp1:last_col())) %>%
  mutate(
    truth = butterflies_r_m$butterflies_jack1,
    model = "lm"
  ) |>
  bind_rows(rf_fit_b %>%
              predict(new_data =  butterflies_r_m |> select(butterflies_jack1, temp1:last_col())) |>
    mutate(
      truth = butterflies_r_m$butterflies_jack1,
      model = "rf") 
  )  |>
  bind_rows(gam_fit_b %>%
              predict(new_data =  butterflies_r_m |> select(butterflies_jack1, temp1:last_col())) |>
    mutate(
      truth = butterflies_r_m$butterflies_jack1,
      model = "rf") 
  )  


results_train_b %>%
  group_by(model) %>%
  rmse(truth = truth, estimate = .pred)


```

### Mammals

```{r mammal models}

mammals_r_m <- combined_richness_wide |>
  left_join(new_preds) |>
  select(tf_id, contains("mammal"), temp1:Y) |>
  filter(!is.na(mammals_Species), !is.na(temp1))

## tidy model workflow
## 

#####
lm_spec <- linear_reg() %>%
  set_engine(engine = "lm")

lm_fit_m <- fit(lm_spec, mammals_jack1 ~ ., mammals_r_m |> select(mammals_jack1, temp1:last_col()))

rf_spec <- 
  rand_forest(trees = 1000) %>% 
  set_engine("ranger", num.threads = cores, importance = "impurity") %>% 
  set_mode("regression")

rf_fit_m <- rf_spec %>% fit( mammals_jack1 ~ ., mammals_r_m |> select(mammals_jack1, temp1:last_col()))

rf_fit_m$fit$variable.importance |> enframe() |>
  arrange(-value) |>
  ggplot() +
  geom_col(aes(reorder(name, -value), value))


gam_fit_m <- gen_additive_mod() %>%
  set_engine("mgcv") %>%
  set_mode("regression") %>%
  fit(mammals_jack1 ~  s(temp1) + s(temp2) +s(rain1) +s(rain2) + s(rain3) + s(conn1) + s(conn2) + s(ls1) + s(ls2) + s(ls3) + s(veg1) + s(elevation) + s(Y),
        data = mammals_r_m |> select(mammals_jack1, temp1:last_col()))

gam_fit_m$fit |> tbl_regression()

results_train_m <- lm_fit_m %>%
  predict(new_data = mammals_r_m |> select(mammals_jack1, temp1:last_col())) %>%
  mutate(
    truth = mammals_r_m$mammals_jack1,
    model = "lm"
  ) |>
  bind_rows(rf_fit_m %>%
              predict(new_data =  mammals_r_m |> select(mammals_jack1, temp1:last_col())) |>
    mutate(
      truth = mammals_r_m$mammals_jack1,
      model = "rf") 
  )  |>
  bind_rows(gam_fit_m %>%
              predict(new_data =  mammals_r_m |> select(mammals_jack1, temp1:last_col())) |>
    mutate(
      truth = mammals_r_m$mammals_jack1,
      model = "gam") 
  )  


results_train_m %>%
  group_by(model) %>%
  rmse(truth = truth, estimate = .pred)


```

### Insects

```{r insect models}

insects_r_m <- combined_richness_wide |>
  left_join(new_preds) |>
  select(tf_id, contains("insect"), temp1:Y) |>
  filter(!is.na(insects_Species), !is.na(temp1))

## tidy model workflow
## 

#####
lm_spec <- linear_reg() %>%
  set_engine(engine = "lm")

lm_fit_i <- fit(lm_spec, insects_jack1 ~ ., insects_r_m |> select(insects_jack1, temp1:last_col()))

rf_spec <- 
  rand_forest(trees = 1000) %>% 
  set_engine("ranger", num.threads = cores, importance = "impurity") %>% 
  set_mode("regression")

rf_fit_i <- rf_spec %>% fit( insects_jack1 ~ ., insects_r_m |> select(insects_jack1, temp1:last_col()))

rf_fit_i$fit$variable.importance |> enframe() |>
  arrange(-value) |>
  ggplot() +
  geom_col(aes(reorder(name, -value), value))

gam_fit_i <- gen_additive_mod() %>%
  set_engine("mgcv") %>%
  set_mode("regression") %>%
  fit(insects_jack1 ~  s(temp1) + s(temp2) +s(rain1) +s(rain2) + s(rain3) + s(conn1) + s(conn2) + s(ls1) + s(ls2) + s(ls3) + s(veg1) + s(elevation) + s(Y),
        data = insects_r_m |> select(insects_jack1, temp1:last_col()))

gam_fit_i$fit |> tbl_regression()

results_train_i <- lm_fit_i %>%
  predict(new_data = insects_r_m |> select(insects_jack1, temp1:last_col())) %>%
  mutate(
    truth = insects_r_m$insects_jack1,
    model = "lm"
  ) |>
  bind_rows(rf_fit_i %>%
              predict(new_data =  insects_r_m |> select(insects_jack1, temp1:last_col())) |>
    mutate(
      truth = insects_r_m$insects_jack1,
      model = "rf") 
  )  |>
  bind_rows(gam_fit_i %>%
              predict(new_data =  insects_r_m |> select(insects_jack1, temp1:last_col())) |>
    mutate(
      truth = insects_r_m$insects_jack1,
      model = "gam") 
  )


results_train_i %>%
  group_by(model) %>%
  rmse(truth = truth, estimate = .pred)


```
### Plants

```{r plant models}

plants_r_m <- combined_richness_wide |>
  left_join(new_preds) |>
  select(tf_id, contains("plant"), temp1:Y) |>
  filter(!is.na(plants_Species), !is.na(temp1))

## tidy model workflow
## 

#####
lm_spec <- linear_reg() %>%
  set_engine(engine = "lm")

lm_fit_p <- fit(lm_spec, plants_jack1 ~ ., plants_r_m |> select(plants_jack1, temp1:last_col()))
lm_fit_p

rf_spec <- 
  rand_forest(trees = 1000) %>% 
  set_engine("ranger", num.threads = cores, importance = "impurity") %>% 
  set_mode("regression")

rf_fit_p <- rf_spec %>% fit( plants_jack1 ~ ., plants_r_m |> select(plants_jack1, temp1:last_col()))

rf_fit_p$fit$variable.importance |> enframe() |>
  arrange(-value) |>
  ggplot() +
  geom_col(aes(reorder(name, -value), value))


gam_fit_p <- gen_additive_mod() %>%
  set_engine("mgcv") %>%
  set_mode("regression") %>%
  fit(plants_jack1 ~  s(temp1) + s(temp2) +s(rain1) +s(rain2) + s(rain3) + s(conn1) + s(conn2) + s(ls1) + s(ls2) + s(ls3) + s(veg1) + s(elevation) + s(Y),
        data = plants_r_m |> select(plants_jack1, temp1:last_col()))

broom.mixed::tidy(gam_fit, conf.int = TRUE)

gtsummary::tbl_regression(gam_fit_p$fit) 

plot(gam_fit$fit)

results_train_p <- lm_fit_p %>%
  predict(new_data = plants_r_m |> select(plants_jack1, temp1:last_col())) %>%
  mutate(
    truth = plants_r_m$plants_jack1,
    model = "lm"
  ) |>
  bind_rows(rf_fit_p %>%
              predict(new_data =  plants_r_m |> select(plants_jack1, temp1:last_col())) |>
    mutate(
      truth = plants_r_m$plants_jack1,
      model = "rf") 
  )  |>
  bind_rows(gam_fit_p %>%
              predict(new_data =  plants_r_m |> select(plants_jack1, temp1:last_col())) |>
    mutate(
      truth = plants_r_m$plants_jack1,
      model = "gam") 
  )


results_train_m %>%
  group_by(model) %>%
  rmse(truth = truth, estimate = .pred)


```




Random Forest model has a lower RMSE than linear model or GAM model


## Dissimilarity modelling

### Birds

```{r}

bird_comm <- gpkg_data_dt_2015_1000[classs == "Aves", .(site = tf_id, species)]

sp <- climate_landscape |>
  left_join(bird_comm, by = c("tf_id" = "site")) |>
  left_join(vegetation)

sp |>
  #glimpse()
  select_if(is.numeric) |>
  select(-c(tf_id, class)) |>
  corrr::correlate() |>
  corrr::stretch() |>
  filter(r > 0.9) |>
  arrange(-r)


```

## Reduce dimensions 

Ordination (PCA) of temperature, rainfall, vegetation, landscape metrics, connectivity.

```{r pca reduce variables, eval=FALSE}

needs(factoextra, FactoMineR)

temps <- sp |>
  select(contains("temper")) |>
  mutate_all(scale)

temp_comp <- princomp(temps)[["scores"]][, 1:2]

rain <- sp |>
  select(contains("rain")) |>
  mutate_all(scale)

rain_comp <- princomp(rain)[["scores"]][, 1:3]

conn <- sp |>
  select(NC:IIC) |>
  mutate_all(scale)

conn_comp <- princomp(conn)[["scores"]][, 1]

ls <- sp |>
  select(contains("lsm")) |>
  mutate_all(scale)

ls_comp <- princomp(ls)[["scores"]][, 1]

veg <- sp |>
  select(contains("median")) |>
  mutate_all(scale)

veg_comp <- princomp(veg)[['scores']][, 1]

new_preds <- bind_cols(temp_comp, rain_comp, conn_comp, ls_comp, veg_comp) |>
  rename(temp1 = 1, temp2 = 2, rain1 = 3, rain2 = 4, rain3 = 5, conn1 = 6, ls1 = 7, veg1 = 8)

new_preds <- bind_cols(new_preds, elevation = sp$elevation, tf_id = sp$tf_id, X = sp$X, Y = sp$Y, species = sp$species, lc = sp$id)


```





```{r gdm, eval=FALSE}

spp <- new_preds |>
  select(species, tf_id, X, Y)

env <- new_preds |>
  select(-c(species))

gdmTab <- formatsitepair(bioData=spp, 
                         bioFormat=2, #x-y spp list
                         XColumn="X", 
                         YColumn="Y",
                         sppColumn="species", 
                         siteColumn="tf_id", 
                         predData=env, 
                         weightType = "richness")

gdm.1 <- gdm(data=gdmTab, geo=TRUE)

summary(gdm.1)

var_imp <- gdm::gdm.varImp(gdmTab, geo = TRUE, predSelect = T, parallel = T, cores = 8)

barplot(sort(var_imp$`Predictor Importance`[,1], decreasing = T))

gdm.1.pred <- predict(object=gdm.1, data=gdmTab)

ggplot() |>
  geom_point(aes(gdmTab$distance,  gdm.1.pred)) +
  geom_smooth(aes(gdmTab$distance,  gdm.1.pred), method = "gam") +
  labs(title = "Predicted vs observed distance")




```


```{r, eval=FALSE}

butterfly_comm <- gpkg_data_dt_2015_1000[str_detect(family, "Pier|Hesper|Nympal|Papilionidae|Riodinidae|Lycaenidae"),  .(site = tf_id, species)]

sp_b <- climate_landscape |>
  left_join(butterfly_comm, by = c("tf_id" = "site")) |>
  left_join(vegetation)

new_preds_butterfly <- bind_cols(new_preds, elevation = sp_b$elevation, tf_id = sp_b$tf_id, X = sp_b$X, Y = sp_b$Y, species = sp_b$species, lc = sp_b$id)


```




